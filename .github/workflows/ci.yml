name: 🧪 Sürekli Entegrasyon (CI)

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 1️⃣ Kod Kalitesi Kontrolü
  code-quality:
    name: 🔍 Kod Kalitesi
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Kodu İndir
        uses: actions/checkout@v4

      - name: 🐍 Python Kur
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Bağımlılıkları Yükle
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 mypy

      - name: 🎨 Code Style (Black)
        run: black --check src/ tests/

      - name: 🔧 Linting (Flake8)
        run: |
          flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503 || true

      - name: 🏷️ Type Checking (MyPy)
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true

  # 2️⃣ Unit Testler
  unit-tests:
    name: 🧪 Unit Testler
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Kodu İndir
        uses: actions/checkout@v4

      - name: 🐍 Python Kur
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Bağımlılıkları Yükle
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: 🧪 Testleri Çalıştır
        run: |
          export PYTHONPATH=$PYTHONPATH:./src
          pytest tests/ -v

  # 3️⃣ Docker Build Test
  docker-build:
    name: 🐳 Docker Build & Health Check
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: 📥 Kodu İndir
        uses: actions/checkout@v4

      - name: 🔧 Docker Buildx Kur
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Docker Image Build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: rent-ml-pipeline:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Docker Health Check
        run: |
          docker run --rm rent-ml-pipeline:test python run_pipeline.py
          
